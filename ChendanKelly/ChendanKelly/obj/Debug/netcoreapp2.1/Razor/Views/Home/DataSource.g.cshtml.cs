#pragma checksum "C:\Projects\ChendanKelly\chendan\ChendanKelly\ChendanKelly\Views\Home\DataSource.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "845353281eea88b3f98164b8e5394f03a9e5f1bb"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_DataSource), @"mvc.1.0.view", @"/Views/Home/DataSource.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/DataSource.cshtml", typeof(AspNetCore.Views_Home_DataSource))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Projects\ChendanKelly\chendan\ChendanKelly\ChendanKelly\Views\_ViewImports.cshtml"
using ChendanKelly;

#line default
#line hidden
#line 2 "C:\Projects\ChendanKelly\chendan\ChendanKelly\ChendanKelly\Views\_ViewImports.cshtml"
using ChendanKelly.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"845353281eea88b3f98164b8e5394f03a9e5f1bb", @"/Views/Home/DataSource.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"13d5adcc34f9525c7b600a27605207bbd2339239", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_DataSource : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Projects\ChendanKelly\chendan\ChendanKelly\ChendanKelly\Views\Home\DataSource.cshtml"
  
    ViewData["Title"] = "Data Source";

#line default
#line hidden
            BeginContext(47, 14841, true);
            WriteLiteral(@"

<div class=""row"" id=""datasource"">

    <div class=""col-lg-4"" style=""padding:5px;"">
        <div style=""height:50px"">
            <label for=""start"">文件对应的日期</label>
            <input type=""date"" id=""file-date-picker"" name=""trip""
                   value=""2018-07-22""
                   min=""2018-01-01"" max=""2018-12-31"" />
            <input id=""file-picker"" type=""file"" value=""选择数据文件上传到系统"" />
        </div>
        <div >
            <div id=""fileGrid"" style=""height:600px;min-height: 600px;width:100%;margin-top:5px;""
                    class=""ag-theme-balham""></div>
        </div>
    </div>

    <div class=""col-lg-8"" style=""padding:5px;"">
        <div style=""height:50px;position:relative;"">
            <button style=""position:absolute;bottom:0px;"" id=""delete-selected-items"" onclick=""deleteSelectedItems()"">删除表格中内容</button>
        </div>
        <div id=""datasourceGrid"" style=""height:600px;min-height: 600px;width:100%;margin-top:5px;""
             class=""ag-theme-balham""></div>
    </");
            WriteLiteral(@"div>

</div>

<script src=""https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/jszip.js""></script>

<script type=""text/javascript"" charset=""utf-8"">
    $(document).ready(function () {
        $('#file-date-picker').val(formatDate(new Date()));
    });

    let selectionRow = null;

    var fileGridColumnDefs = [
        {
            headerName: ""Date"", field: ""date"", width: 90
        },
        {
            headerName: ""FileName"", field: ""fileName"", width: 250
        }
    ];
    var fileGridOptions = {
        columnDefs: fileGridColumnDefs,
        rowSelection: 'single',
        onSelectionChanged: onFileGridSelectionChanged,
        enableSorting: true
        //rowData: fileRowData
    };
    var fileGrid = document.querySelector('#fileGrid');
    new agGrid.Grid(fileGrid, fileGridOptions);
    refreshFileGrid();


    var datasourceGridOptions = {
        rowSelection: 'single',
      ");
            WriteLiteral(@"  columnDefs: [],
        enableSorting: true
    };
    var datasourceGrid = document.querySelector('#datasourceGrid');
    new agGrid.Grid(datasourceGrid, datasourceGridOptions);
    refreshDatasourceGrid();

    $(""#file-picker"").change(function (e) {
        let file = e.currentTarget.files[0];
        var reader = new FileReader();
        reader.onload = function () {
            var fileJson = csvJSON(reader.result);
            let orderId = fileJson[0][""订单编号""] == undefined ? fileJson[0][""\""订单编号\""""] : fileJson[0][""订单编号""];
            let baobeiId = fileJson[0][""外部系统编号""] == undefined ? fileJson[0][""\""外部系统编号\""""] : fileJson[0][""外部系统编号""];
            let partnerOrderId = fileJson[0][""Partner_transaction_id""] == undefined ? fileJson[0][""\""Partner_transaction_id\""""] : fileJson[0][""Partner_transaction_id""];
            let priceBaobeiId = fileJson[0][""BaobeiId""];
            debugger;
            if (fileJson.length > 0 && orderId !== undefined && baobeiId === undefined && partnerOrderId ===");
            WriteLiteral(@" undefined) {
                let newOrders = [];
                for (let i = 0; i < fileJson.length; i++) {
                    let orderId = fileJson[i][""订单编号""] == undefined ? fileJson[i][""\""订单编号\""""] : fileJson[i][""订单编号""];
                    let amount = fileJson[i][""总金额""] == undefined ? fileJson[i][""\""总金额\""""] : fileJson[i][""总金额""];
                    newOrders.push({
                        orderId: orderId,
                        amount: amount,
                    });
                }
                uploadOrder($('#file-date-picker')[0].value, newOrders, file.name);
            }
            else if (fileJson.length > 0 && orderId !== undefined && baobeiId !== undefined) {
                debugger;
                let newBaobeis = [];
                for (let i = 0; i < fileJson.length; i++) {
                    let orderId = fileJson[i][""订单编号""] == undefined ? fileJson[i][""\""订单编号\""""] : fileJson[i][""订单编号""];
                    let baobeiExternalId = fileJson[i][""外部系统编号""] == undefine");
            WriteLiteral(@"d ? fileJson[i][""\""外部系统编号\""""] : fileJson[i][""外部系统编号""];
                    let quantity = fileJson[i][""购买数量""] == undefined ? fileJson[i][""\""购买数量\""""] : fileJson[i][""购买数量""];
                    let baobeiTitle = fileJson[i][""标题""] == undefined ? fileJson[i][""\""标题\""""] : fileJson[i][""标题""];
                    newBaobeis.push({
                        orderId: orderId,
                        baobeiExternalId,
                        quantity,
                        baobeiTitle
                    });
                }
                uploadBaobei($('#file-date-picker')[0].value, newBaobeis, file.name);
            }
            else if (fileJson.length > 0 && partnerOrderId !== undefined) {
                debugger;
                let newFees = [];
                for (let i = 0; i < fileJson.length; i++) {
                    let partnerOrderId = fileJson[i][""Partner_transaction_id""];
                    let feeType = fileJson[i][""Fee_type""];
                    let feeAmount = fileJson[i][""Fe");
            WriteLiteral(@"e_amount""];
                    newFees.push({
                        partnerOrderId,
                        feeType,
                        feeAmount
                    });
                }
                uploadFee($('#file-date-picker')[0].value, newFees, file.name);
            }
            else if (fileJson.length > 0 && priceBaobeiId != undefined) {
                let newPrices = [];
                debugger;
                for (let i = 0; i < fileJson.length; i++) {
                    let baobeiId = fileJson[i][""BaobeiId""];
                    let baobeiTitle = fileJson[i][""BaobeiTitle""];
                    let unitPriceInEuro = fileJson[i][""UnitPriceInEuro""];
                    if (unitPriceInEuro !== undefined)
                        unitPriceInEuro = parseFloat(unitPriceInEuro);
                    newPrices.push({
                        baobeiId,
                        baobeiTitle,
                        unitPriceInEuro
                    });
                }");
            WriteLiteral(@"
                uploadPrice($('#file-date-picker')[0].value, newPrices, file.name);
            }
            else {
                alert('这个文件不能被识别');
            }
        };
        reader.readAsText(file, 'utf-8');
    });

    function refreshFileGrid() {
        agGrid.simpleHttpRequest({ url: '/DataSource/GetAllFiles' }).then(function (data) {
            let newData = [];
            for (let i = 0; i < data.length; i++) {
                data[i].date = data[i].date.slice(0, 10);
                newData.push(data[i]);
            }
            fileGridOptions.api.setRowData(data);
        });
    }

    function onFileGridSelectionChanged() {
        var selectedRows = fileGridOptions.api.getSelectedRows();
        selectionRow = selectedRows[0];
        refreshDatasourceGrid();
        //alert(JSON.stringify(selectedRows[0]));
    }

    function refreshDatasourceGrid() {
        if (selectionRow != null) {
            switch (selectionRow.fileType) {
                ");
            WriteLiteral(@"case 'Baobei':
                    debugger;
                    datasourceGridOptions.api.setColumnDefs([
                        {
                            headerName: ""订单编号"", field: ""orderId""
                        },
                        {
                            headerName: ""外部系统编号"", field: ""baobeiExternalId""
                        },
                        {
                            headerName: ""购买数量"", field: ""quantity""
                        },
                        {
                            headerName: ""标题"", field: ""baobeiTitle""
                        }
                    ]);
                    agGrid.simpleHttpRequest({ url: '/DataSource/GetBaobeis?date=' + selectionRow.date }).then(function (data) {
                        datasourceGridOptions.api.setRowData(data);
                    });
                    break;
                case 'Order':
                    datasourceGridOptions.api.setColumnDefs([
                        {
                   ");
            WriteLiteral(@"         headerName: ""订单编号"", field: ""orderId""
                        },
                        {
                            headerName: ""总金额"", field: ""amount""
                        }
                    ]);
                    agGrid.simpleHttpRequest({ url: '/DataSource/GetOrders?date=' + selectionRow.date }).then(function (data) {
                        datasourceGridOptions.api.setRowData(data);
                    });
                    break;
                case 'Fee':
                    datasourceGridOptions.api.setColumnDefs([
                        {
                            headerName: ""订单编号"", field: ""partnerOrderId""
                        },
                        {
                            headerName: ""Fee Type"", field: ""feeType""
                        },
                        {
                            headerName: ""Fee Amount"", field: ""feeAmount""
                        }
                    ]);
                    agGrid.simpleHttpRequest({ url: '/Dat");
            WriteLiteral(@"aSource/GetFees?date=' + selectionRow.date }).then(function (data) {
                        debugger;
                        datasourceGridOptions.api.setRowData(data);
                    });
                    break;
                case 'Price':
                    datasourceGridOptions.api.setColumnDefs([
                        {
                            headerName: ""宝贝编号"", field: ""baobeiId""
                        },
                        {
                            headerName: ""宝贝标题"", field: ""baobeiTitle""
                        },
                        {
                            headerName: ""宝贝单价"", field: ""unitPriceInEuro""
                        }
                    ]);
                    agGrid.simpleHttpRequest({ url: '/DataSource/GetPrices?date=' + selectionRow.date }).then(function (data) {
                        debugger;
                        datasourceGridOptions.api.setRowData(data);
                    });
                    break;
            }
  ");
            WriteLiteral(@"      }
        else {
            datasourceGridOptions.api.setColumnDefs([
            ]);
            datasourceGridOptions.api.setRowData([]);
        }
    }

    function uploadFee(date, jsonValue, fileName) {
        fetch('/DataSource/InsertDataToFeeTable', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ date, newFees: jsonValue, fileName })
        }).then(e => {
            if (e.status === 200) {
                refreshFileGrid();
            }
            else {
                alert('上传文件失败');
            }
        });
    }

    function uploadPrice(date, jsonValue, fileName) {
        fetch('/DataSource/InsertDataToPriceTable', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.");
            WriteLiteral(@"stringify({ date, newPrices: jsonValue, fileName })
        }).then(e => {
            if (e.status === 200) {
                refreshFileGrid();
            }
            else {
                alert('上传文件失败');
            }
        });
    }

    function uploadBaobei(date, jsonValue, fileName) {
        fetch('/DataSource/InsertDataToBaobeiTable', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ date, newBaobeis: jsonValue, fileName })
        }).then(e => {
            if (e.status === 200) {
                refreshFileGrid();
            }
            else {
                alert('上传文件失败');
            }
        });
    }

    function deleteSelectedItems() {
        if (selectionRow != null) {
            let fetchUrl = '/DataSource/';
            if (selectionRow.fileType == 'Order') {
                fetchUrl = fetchUrl ");
            WriteLiteral(@"+ 'DeleteDataFromOrderTableAsync';
            }
            else if (selectionRow.fileType == 'Baobei') {
                fetchUrl = fetchUrl + 'DeleteDataFromBaobeiTableAsync';
            }
            else if (selectionRow.fileType == 'Fee') {
                fetchUrl = fetchUrl + 'DeleteDataFromFeeTableAsync';
            }
            else if (selectionRow.fileType == 'Price') {
                fetchUrl = fetchUrl + 'DeleteDataFromPriceTableAsync';
            }
            fetch(fetchUrl, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(selectionRow)
            }).then(e => {
                debugger;
                if (e.status === 200) {
                    refreshFileGrid();
                    selectionRow = null;
                    refreshDatasourceGrid();
                }
                else {
  ");
            WriteLiteral(@"                  alert('删除数据失败');
                }
            });
        }
    }

    function uploadOrder(date, jsonValue, fileName) {
        fetch('/DataSource/InsertDataToOrderTable', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                date,
                newOrders: jsonValue,
                fileName
            })
        }).then(e => {
            if (e.status === 200) {
                refreshFileGrid();
            }
            else {
                alert('上传文件失败');
            }
        });;
    }

    function csvJSON(csv) {
        var lines = csv.split(""\n"");
        var result = [];
        var headers = lines[0].split("","");
        for (var i = 1; i < lines.length; i++) {
            var obj = {};
            var currentline = lines[i].split("","");
            for (var j = 0; j < headers.leng");
            WriteLiteral(@"th; j++) {
                obj[headers[j]] = currentline[j];
            }
            result.push(obj);
        }
        return result;
    }

    function formatDate(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;

        return [year, month, day].join('-');
    }

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
